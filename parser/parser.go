// Code generated by goyacc DO NOT EDIT.
// CAUTION: Generated file - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"tinysql/parser/ast"
	"tinysql/parser/model"
	"tinysql/parser/opcode"
)

type yySymType struct {
	yys       int
	offset    int
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault               = 57388
	yyEOFCode               = 57344
	Identifier              = 57381
	and                     = 57360
	andand                  = 57363
	as                      = 57348
	between                 = 57386
	decLit                  = 57366
	div                     = 57355
	eq                      = 57368
	yyErrCode               = 57345
	falseKwd                = 57358
	floatLit                = 57365
	from                    = 57347
	ge                      = 57369
	identifier              = 57377
	in                      = 57362
	inner                   = 57350
	intLit                  = 57367
	invalid                 = 57380
	is                      = 57361
	join                    = 57349
	le                      = 57370
	lowerThanSetKeyword     = 57383
	lowerThanStringLitToken = 57382
	lsh                     = 57371
	mod                     = 57356
	neg                     = 57387
	neq                     = 57372
	neqSynonym              = 57373
	not                     = 57353
	not2                    = 57376
	null                    = 57354
	nulleq                  = 57374
	or                      = 57359
	pipes                   = 57364
	pipesAsOr               = 57385
	rsh                     = 57375
	selectKwd               = 57346
	stringLit               = 57379
	tableRefPriority        = 57384
	trueKwd                 = 57357
	underscoreCS            = 57378
	where                   = 57351
	xor                     = 57352

	yyMaxDepth = 200
	yyTabOfs   = -93
)

var (
	yyXLAT = map[int]int{
		43:    0,  // '+' (71x)
		45:    1,  // '-' (71x)
		57344: 2,  // $end (68x)
		59:    3,  // ';' (67x)
		57381: 4,  // Identifier (55x)
		57360: 5,  // and (45x)
		57363: 6,  // andand (45x)
		57359: 7,  // or (45x)
		57385: 8,  // pipesAsOr (45x)
		57352: 9,  // xor (45x)
		41:    10, // ')' (44x)
		46:    11, // '.' (42x)
		42:    12, // '*' (39x)
		60:    13, // '<' (39x)
		62:    14, // '>' (39x)
		57368: 15, // eq (39x)
		57369: 16, // ge (39x)
		57361: 17, // is (39x)
		57370: 18, // le (39x)
		57372: 19, // neq (39x)
		57373: 20, // neqSynonym (39x)
		57354: 21, // null (39x)
		57374: 22, // nulleq (39x)
		57379: 23, // stringLit (39x)
		33:    24, // '!' (36x)
		40:    25, // '(' (36x)
		126:   26, // '~' (36x)
		57366: 27, // decLit (36x)
		57358: 28, // falseKwd (36x)
		57365: 29, // floatLit (36x)
		57367: 30, // intLit (36x)
		57376: 31, // not2 (36x)
		57357: 32, // trueKwd (36x)
		37:    33, // '%' (35x)
		38:    34, // '&' (35x)
		47:    35, // '/' (35x)
		94:    36, // '^' (35x)
		124:   37, // '|' (35x)
		57355: 38, // div (35x)
		57371: 39, // lsh (35x)
		57356: 40, // mod (35x)
		57375: 41, // rsh (35x)
		57400: 42, // Literal (24x)
		57406: 43, // SimpleExpr (24x)
		57407: 44, // SimpleIdent (24x)
		57411: 45, // StringLiteral (24x)
		44:    46, // ',' (21x)
		57389: 47, // BitExpr (19x)
		57351: 48, // where (16x)
		57349: 49, // join (13x)
		57350: 50, // inner (12x)
		125:   51, // '}' (11x)
		57353: 52, // not (11x)
		57347: 53, // from (8x)
		57401: 54, // PredicateExpr (7x)
		57390: 55, // BoolPri (6x)
		57394: 56, // Expression (6x)
		57421: 57, // logAnd (6x)
		57422: 58, // logOr (6x)
		57399: 59, // JoinTable (4x)
		57414: 60, // TableFactor (4x)
		57415: 61, // TableName (4x)
		57416: 62, // TableRef (4x)
		57348: 63, // as (3x)
		57392: 64, // CrossOpt (3x)
		123:   65, // '{' (2x)
		57393: 66, // EscapedTableRef (2x)
		57395: 67, // Field (2x)
		57346: 68, // selectKwd (2x)
		57402: 69, // SelectStmt (2x)
		57403: 70, // SelectStmtBasic (2x)
		57405: 71, // SelectStmtFromTable (2x)
		57409: 72, // Statement (2x)
		57391: 73, // CompareOp (1x)
		57396: 74, // FieldList (1x)
		57398: 75, // IsOrNotOp (1x)
		57404: 76, // SelectStmtFieldList (1x)
		57408: 77, // Start (1x)
		57410: 78, // StatementList (1x)
		57412: 79, // TableAsName (1x)
		57413: 80, // TableAsNameOpt (1x)
		57417: 81, // TableRefs (1x)
		57418: 82, // TableRefsClause (1x)
		57419: 83, // WhereClause (1x)
		57420: 84, // WhereClauseOptional (1x)
		57388: 85, // $default (0x)
		57386: 86, // between (0x)
		57345: 87, // error (0x)
		57377: 88, // identifier (0x)
		57362: 89, // in (0x)
		57397: 90, // InOrNotOp (0x)
		57380: 91, // invalid (0x)
		57383: 92, // lowerThanSetKeyword (0x)
		57382: 93, // lowerThanStringLitToken (0x)
		57387: 94, // neg (0x)
		57364: 95, // pipes (0x)
		57384: 96, // tableRefPriority (0x)
		57378: 97, // underscoreCS (0x)
	}

	yySymNames = []string{
		"'+'",
		"'-'",
		"$end",
		"';'",
		"Identifier",
		"and",
		"andand",
		"or",
		"pipesAsOr",
		"xor",
		"')'",
		"'.'",
		"'*'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"is",
		"le",
		"neq",
		"neqSynonym",
		"null",
		"nulleq",
		"stringLit",
		"'!'",
		"'('",
		"'~'",
		"decLit",
		"falseKwd",
		"floatLit",
		"intLit",
		"not2",
		"trueKwd",
		"'%'",
		"'&'",
		"'/'",
		"'^'",
		"'|'",
		"div",
		"lsh",
		"mod",
		"rsh",
		"Literal",
		"SimpleExpr",
		"SimpleIdent",
		"StringLiteral",
		"','",
		"BitExpr",
		"where",
		"join",
		"inner",
		"'}'",
		"not",
		"from",
		"PredicateExpr",
		"BoolPri",
		"Expression",
		"logAnd",
		"logOr",
		"JoinTable",
		"TableFactor",
		"TableName",
		"TableRef",
		"as",
		"CrossOpt",
		"'{'",
		"EscapedTableRef",
		"Field",
		"selectKwd",
		"SelectStmt",
		"SelectStmtBasic",
		"SelectStmtFromTable",
		"Statement",
		"CompareOp",
		"FieldList",
		"IsOrNotOp",
		"SelectStmtFieldList",
		"Start",
		"StatementList",
		"TableAsName",
		"TableAsNameOpt",
		"TableRefs",
		"TableRefsClause",
		"WhereClause",
		"WhereClauseOptional",
		"$default",
		"between",
		"error",
		"identifier",
		"in",
		"InOrNotOp",
		"invalid",
		"lowerThanSetKeyword",
		"lowerThanStringLitToken",
		"neg",
		"pipes",
		"tableRefPriority",
		"underscoreCS",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{77, 1},
		{78, 1},
		{78, 3},
		{72, 1},
		{69, 1},
		{71, 4},
		{70, 2},
		{76, 1},
		{74, 1},
		{74, 3},
		{67, 1},
		{67, 3},
		{67, 5},
		{82, 1},
		{81, 1},
		{81, 3},
		{66, 1},
		{66, 4},
		{62, 1},
		{62, 1},
		{60, 2},
		{61, 1},
		{61, 3},
		{80, 0},
		{80, 1},
		{79, 1},
		{79, 2},
		{59, 3},
		{64, 1},
		{64, 2},
		{84, 0},
		{84, 1},
		{83, 2},
		{56, 3},
		{56, 3},
		{56, 3},
		{56, 2},
		{56, 1},
		{55, 3},
		{55, 3},
		{55, 1},
		{54, 1},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 3},
		{47, 1},
		{43, 1},
		{43, 1},
		{43, 2},
		{43, 2},
		{43, 2},
		{43, 2},
		{43, 2},
		{43, 3},
		{44, 1},
		{44, 3},
		{44, 4},
		{44, 5},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{45, 1},
		{45, 2},
		{58, 1},
		{58, 1},
		{57, 1},
		{57, 1},
		{75, 1},
		{75, 2},
		{90, 1},
		{90, 2},
		{73, 1},
		{73, 1},
		{73, 1},
		{73, 1},
		{73, 1},
		{73, 1},
		{73, 1},
		{73, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [140][]uint16{
		// 0
		{68: 100, 97, 99, 98, 96, 77: 94, 95},
		{2: 93},
		{2: 92, 231},
		{2: 91, 91},
		{2: 89, 89},
		// 5
		{2: 88, 88},
		{53: 113},
		{4: 105, 12: 104, 67: 103, 74: 102, 76: 101},
		{53: 86},
		{46: 111, 53: 85},
		// 10
		{46: 84, 53: 84},
		{46: 82, 53: 82},
		{11: 106},
		{4: 108, 12: 107},
		{46: 81, 53: 81},
		// 15
		{11: 109},
		{12: 110},
		{46: 80, 53: 80},
		{4: 105, 12: 104, 67: 112},
		{46: 83, 53: 83},
		// 20
		{4: 122, 59: 120, 119, 121, 117, 65: 118, 116, 81: 115, 114},
		{2: 62, 62, 48: 142, 83: 141, 140},
		{2: 79, 79, 46: 138, 48: 79},
		{2: 78, 78, 46: 78, 48: 78},
		{2: 76, 76, 46: 76, 48: 76, 134, 135, 64: 133},
		// 25
		{4: 130},
		{2: 74, 74, 46: 74, 48: 74, 74, 74, 74},
		{2: 73, 73, 46: 73, 48: 73, 73, 73, 73},
		{2: 69, 69, 127, 46: 69, 48: 69, 69, 69, 69, 63: 128, 79: 126, 125},
		{2: 71, 71, 71, 11: 123, 46: 71, 48: 71, 71, 71, 71, 63: 71},
		// 30
		{4: 124},
		{2: 70, 70, 70, 46: 70, 48: 70, 70, 70, 70, 63: 70},
		{2: 72, 72, 46: 72, 48: 72, 72, 72, 72},
		{2: 68, 68, 46: 68, 48: 68, 68, 68, 68},
		{2: 67, 67, 46: 67, 48: 67, 67, 67, 67},
		// 35
		{4: 129},
		{2: 66, 66, 46: 66, 48: 66, 66, 66, 66},
		{4: 122, 59: 120, 119, 121, 131},
		{49: 134, 135, 132, 64: 133},
		{2: 75, 75, 46: 75, 48: 75},
		// 40
		{4: 122, 59: 120, 119, 121, 137},
		{4: 64},
		{49: 136},
		{4: 63},
		{2: 65, 65, 46: 65, 48: 65, 65, 65, 65, 64: 133},
		// 45
		{4: 122, 59: 120, 119, 121, 117, 65: 118, 139},
		{2: 77, 77, 46: 77, 48: 77},
		{2: 87, 87},
		{2: 61, 61},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 143},
		// 50
		{2: 60, 60, 5: 183, 182, 181, 180, 177, 57: 178, 176},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 230},
		{2: 55, 55, 5: 55, 55, 55, 55, 55, 55, 13: 222, 220, 225, 219, 218, 221, 223, 224, 22: 226, 73: 217, 75: 216},
		{2: 52, 52, 5: 52, 52, 52, 52, 52, 52, 13: 52, 52, 52, 52, 52, 52, 52, 52, 22: 52},
		{196, 197, 51, 51, 5: 51, 51, 51, 51, 51, 51, 12: 198, 51, 51, 51, 51, 51, 51, 51, 51, 22: 51, 33: 200, 193, 199, 203, 192, 201, 194, 202, 195},
		// 55
		{38, 38, 38, 38, 5: 38, 38, 38, 38, 38, 38, 12: 38, 38, 38, 38, 38, 38, 38, 38, 38, 22: 38, 33: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 5: 37, 37, 37, 37, 37, 37, 12: 37, 37, 37, 37, 37, 37, 37, 37, 37, 22: 37, 33: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 5: 36, 36, 36, 36, 36, 36, 12: 36, 36, 36, 36, 36, 36, 36, 36, 36, 22: 36, 33: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 191, 149, 165},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 190, 149, 165},
		// 60
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 189, 149, 165},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 188, 149, 165},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 187, 149, 165},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 175},
		{29, 29, 29, 29, 5: 29, 29, 29, 29, 29, 29, 171, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22: 29, 33: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 65
		{4: 168},
		{25, 25, 25, 25, 5: 25, 25, 25, 25, 25, 25, 12: 25, 25, 25, 25, 25, 25, 25, 25, 25, 22: 25, 33: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 5: 24, 24, 24, 24, 24, 24, 12: 24, 24, 24, 24, 24, 24, 24, 24, 24, 22: 24, 33: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 5: 23, 23, 23, 23, 23, 23, 12: 23, 23, 23, 23, 23, 23, 23, 23, 23, 22: 23, 33: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 5: 22, 22, 22, 22, 22, 22, 12: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22: 22, 33: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		// 70
		{21, 21, 21, 21, 5: 21, 21, 21, 21, 21, 21, 12: 21, 21, 21, 21, 21, 21, 21, 21, 21, 22: 21, 33: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 5: 20, 20, 20, 20, 20, 20, 12: 20, 20, 20, 20, 20, 20, 20, 20, 20, 22: 20, 33: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 5: 19, 19, 19, 19, 19, 19, 12: 19, 19, 19, 19, 19, 19, 19, 19, 19, 22: 19, 167, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 5: 18, 18, 18, 18, 18, 18, 12: 18, 18, 18, 18, 18, 18, 18, 18, 18, 22: 18, 18, 33: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 17, 17, 17, 5: 17, 17, 17, 17, 17, 17, 12: 17, 17, 17, 17, 17, 17, 17, 17, 17, 22: 17, 17, 33: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 75
		{11: 169},
		{4: 170},
		{27, 27, 27, 27, 5: 27, 27, 27, 27, 27, 27, 12: 27, 27, 27, 27, 27, 27, 27, 27, 27, 22: 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{4: 172},
		{28, 28, 28, 28, 5: 28, 28, 28, 28, 28, 28, 173, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22: 28, 33: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 80
		{4: 174},
		{26, 26, 26, 26, 5: 26, 26, 26, 26, 26, 26, 12: 26, 26, 26, 26, 26, 26, 26, 26, 26, 22: 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{5: 183, 182, 181, 180, 177, 179, 57: 178, 176},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 186},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 185},
		// 85
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 52: 144, 54: 146, 145, 184},
		{30, 30, 30, 30, 5: 30, 30, 30, 30, 30, 30, 12: 30, 30, 30, 30, 30, 30, 30, 30, 30, 22: 30, 33: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{16, 16, 4: 16, 11: 16, 21: 16, 23: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 52: 16},
		{15, 15, 4: 15, 11: 15, 21: 15, 23: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 52: 15},
		{14, 14, 4: 14, 11: 14, 21: 14, 23: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 52: 14},
		// 90
		{13, 13, 4: 13, 11: 13, 21: 13, 23: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 52: 13},
		{2: 57, 57, 5: 57, 57, 57, 57, 57, 57, 57: 178, 176},
		{2: 58, 58, 5: 183, 182, 58, 58, 58, 58, 57: 178, 176},
		{2: 59, 59, 5: 183, 182, 59, 59, 177, 59, 57: 178, 176},
		{31, 31, 31, 31, 5: 31, 31, 31, 31, 31, 31, 12: 31, 31, 31, 31, 31, 31, 31, 31, 31, 22: 31, 33: 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 95
		{32, 32, 32, 32, 5: 32, 32, 32, 32, 32, 32, 12: 32, 32, 32, 32, 32, 32, 32, 32, 32, 22: 32, 33: 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{33, 33, 33, 33, 5: 33, 33, 33, 33, 33, 33, 12: 33, 33, 33, 33, 33, 33, 33, 33, 33, 22: 33, 33: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 5: 34, 34, 34, 34, 34, 34, 12: 34, 34, 34, 34, 34, 34, 34, 34, 34, 22: 34, 33: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{35, 35, 35, 35, 5: 35, 35, 35, 35, 35, 35, 12: 35, 35, 35, 35, 35, 35, 35, 35, 35, 22: 35, 33: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 215},
		// 100
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 214},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 213},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 212},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 211},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 210},
		// 105
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 209},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 208},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 207},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 206},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 205},
		// 110
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 204},
		{39, 39, 39, 39, 5: 39, 39, 39, 39, 39, 39, 12: 39, 39, 39, 39, 39, 39, 39, 39, 39, 22: 39, 33: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 5: 40, 40, 40, 40, 40, 40, 12: 40, 40, 40, 40, 40, 40, 40, 40, 40, 22: 40, 33: 40, 40, 40, 203, 40, 40, 40, 40, 40},
		{41, 41, 41, 41, 5: 41, 41, 41, 41, 41, 41, 12: 41, 41, 41, 41, 41, 41, 41, 41, 41, 22: 41, 33: 41, 41, 41, 203, 41, 41, 41, 41, 41},
		{42, 42, 42, 42, 5: 42, 42, 42, 42, 42, 42, 12: 42, 42, 42, 42, 42, 42, 42, 42, 42, 22: 42, 33: 42, 42, 42, 203, 42, 42, 42, 42, 42},
		// 115
		{43, 43, 43, 43, 5: 43, 43, 43, 43, 43, 43, 12: 43, 43, 43, 43, 43, 43, 43, 43, 43, 22: 43, 33: 43, 43, 43, 203, 43, 43, 43, 43, 43},
		{44, 44, 44, 44, 5: 44, 44, 44, 44, 44, 44, 12: 44, 44, 44, 44, 44, 44, 44, 44, 44, 22: 44, 33: 44, 44, 44, 203, 44, 44, 44, 44, 44},
		{45, 45, 45, 45, 5: 45, 45, 45, 45, 45, 45, 12: 198, 45, 45, 45, 45, 45, 45, 45, 45, 22: 45, 33: 200, 45, 199, 203, 45, 201, 45, 202, 45},
		{46, 46, 46, 46, 5: 46, 46, 46, 46, 46, 46, 12: 198, 46, 46, 46, 46, 46, 46, 46, 46, 22: 46, 33: 200, 46, 199, 203, 46, 201, 46, 202, 46},
		{196, 197, 47, 47, 5: 47, 47, 47, 47, 47, 47, 12: 198, 47, 47, 47, 47, 47, 47, 47, 47, 22: 47, 33: 200, 47, 199, 203, 47, 201, 47, 202, 47},
		// 120
		{196, 197, 48, 48, 5: 48, 48, 48, 48, 48, 48, 12: 198, 48, 48, 48, 48, 48, 48, 48, 48, 22: 48, 33: 200, 48, 199, 203, 48, 201, 48, 202, 48},
		{196, 197, 49, 49, 5: 49, 49, 49, 49, 49, 49, 12: 198, 49, 49, 49, 49, 49, 49, 49, 49, 22: 49, 33: 200, 49, 199, 203, 49, 201, 194, 202, 195},
		{196, 197, 50, 50, 5: 50, 50, 50, 50, 50, 50, 12: 198, 50, 50, 50, 50, 50, 50, 50, 50, 22: 50, 33: 200, 193, 199, 203, 50, 201, 194, 202, 195},
		{21: 229},
		{154, 153, 4: 157, 11: 158, 21: 160, 23: 166, 151, 156, 152, 163, 159, 162, 164, 155, 161, 42: 150, 148, 149, 165, 47: 147, 54: 228},
		// 125
		{21: 12, 52: 227},
		{8, 8, 4: 8, 11: 8, 21: 8, 23: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 4: 7, 11: 7, 21: 7, 23: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 4: 6, 11: 6, 21: 6, 23: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 4: 5, 11: 5, 21: 5, 23: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 130
		{4, 4, 4: 4, 11: 4, 21: 4, 23: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 4: 3, 11: 3, 21: 3, 23: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 4: 2, 11: 2, 21: 2, 23: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 4: 1, 11: 1, 21: 1, 23: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{21: 11},
		// 135
		{2: 53, 53, 5: 53, 53, 53, 53, 53, 53, 13: 53, 53, 53, 53, 53, 53, 53, 53, 22: 53},
		{2: 54, 54, 5: 54, 54, 54, 54, 54, 54, 13: 54, 54, 54, 54, 54, 54, 54, 54, 22: 54},
		{2: 56, 56, 5: 56, 56, 56, 56, 56, 56, 57: 178, 176},
		{68: 100, 97, 99, 98, 232},
		{2: 90, 90},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 87

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				s := yyS[yypt-0].statement
				if lexer, ok := yylex.(stmtTexter); ok {
					s.SetText(lexer.stmtText())
				}
				parser.result = append(parser.result, s)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				s := yyS[yypt-0].statement
				if lexer, ok := yylex.(stmtTexter); ok {
					s.SetText(lexer.stmtText())
				}
				parser.result = append(parser.result, s)
			}
		}
	case 5:
		{
			st := yyS[yypt-0].item.(*ast.SelectStmt)
			parser.yyVAL.statement = st
		}
	case 6:
		{
			st := yyS[yypt-3].item.(*ast.SelectStmt)
			st.From = yyS[yypt-1].item.(*ast.TableRefsClause)
			lastField := st.Fields.Fields[len(st.Fields.Fields)-1]
			if lastField.Expr != nil && lastField.AsName.O == "" {
				lastEnd := parser.endOffset(&yyS[yypt-4])
				lastField.SetText(parser.src[lastField.Offset:lastEnd])
			}
			if yyS[yypt-0].item != nil {
				st.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = st
		}
	case 7:
		{
			st := &ast.SelectStmt{
				Fields: yyS[yypt-0].item.(*ast.FieldList),
			}
			parser.yyVAL.item = st
		}
	case 8:
		{
			parser.yyVAL.item = &ast.FieldList{Fields: yyS[yypt-0].item.([]*ast.SelectField)}
		}
	case 9:
		{
			field := yyS[yypt-0].item.(*ast.SelectField)
			field.Offset = parser.startOffset(&yyS[yypt])
			parser.yyVAL.item = []*ast.SelectField{field}
		}
	case 10:
		{

			fl := yyS[yypt-2].item.([]*ast.SelectField)
			last := fl[len(fl)-1]
			if last.Expr != nil && last.AsName.O == "" {
				lastEnd := parser.endOffset(&yyS[yypt-1])
				last.SetText(parser.src[last.Offset:lastEnd])
			}
			newField := yyS[yypt-0].item.(*ast.SelectField)
			newField.Offset = parser.startOffset(&yyS[yypt])
			parser.yyVAL.item = append(fl, newField)
		}
	case 11:
		{
			parser.yyVAL.item = &ast.SelectField{WildCard: &ast.WildCardField{}}
		}
	case 12:
		{
			wildCard := &ast.WildCardField{Table: model.NewCIStr(yyS[yypt-2].ident)}
			parser.yyVAL.item = &ast.SelectField{WildCard: wildCard}
		}
	case 13:
		{
			wildCard := &ast.WildCardField{Schema: model.NewCIStr(yyS[yypt-4].ident), Table: model.NewCIStr(yyS[yypt-2].ident)}
			parser.yyVAL.item = &ast.SelectField{WildCard: wildCard}
		}
	case 14:
		{
			parser.yyVAL.item = &ast.TableRefsClause{TableRefs: yyS[yypt-0].item.(*ast.Join)}
		}
	case 15:
		{
			if j, ok := yyS[yypt-0].item.(*ast.Join); ok {
				// if $1 is Join, use it directly
				parser.yyVAL.item = j
			} else {
				parser.yyVAL.item = &ast.Join{Left: yyS[yypt-0].item.(ast.ResultSetNode), Right: nil}
			}
		}
	case 16:
		{
			/* from a, b is default cross join */
			parser.yyVAL.item = &ast.Join{Left: yyS[yypt-2].item.(ast.ResultSetNode), Right: yyS[yypt-0].item.(ast.ResultSetNode), Tp: ast.CrossJoin}
		}
	case 17:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 18:
		{
			/*
			* ODBC escape syntax for outer join is { OJ join_table }
			* Use an Identifier for OJ
			 */
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 19:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 20:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 21:
		{
			tn := yyS[yypt-1].item.(*ast.TableName)
			parser.yyVAL.item = &ast.TableSource{Source: tn, AsName: yyS[yypt-0].item.(model.CIStr)}
		}
	case 22:
		{
			parser.yyVAL.item = &ast.TableName{Name: model.NewCIStr(yyS[yypt-0].ident)}
		}
	case 23:
		{
			parser.yyVAL.item = &ast.TableName{Schema: model.NewCIStr(yyS[yypt-2].ident), Name: model.NewCIStr(yyS[yypt-0].ident)}
		}
	case 24:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 25:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 26:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 27:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 28:
		{
			parser.yyVAL.item = &ast.Join{Left: yyS[yypt-2].item.(ast.ResultSetNode), Right: yyS[yypt-0].item.(ast.ResultSetNode), Tp: ast.CrossJoin}
		}
	case 31:
		{
			parser.yyVAL.item = nil
		}
	case 32:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 33:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 34:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 35:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 36:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 37:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
		}
	case 39:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{Expr: yyS[yypt-2].expr, Not: !yyS[yypt-1].item.(bool)}
		}
	case 40:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: yyS[yypt-1].item.(opcode.Op), L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 43:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Or, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 44:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.And, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 45:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LeftShift, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 46:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.RightShift, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 47:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 48:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 49:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 50:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 51:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 52:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.IntDiv, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 53:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 54:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Xor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 58:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
		}
	case 59:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.BitNeg, V: yyS[yypt-0].expr}
		}
	case 60:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 61:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Plus, V: yyS[yypt-0].expr}
		}
	case 62:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
		}
	case 63:
		{
			startOffset := parser.startOffset(&yyS[yypt-1])
			endOffset := parser.endOffset(&yyS[yypt])
			expr := yyS[yypt-1].expr
			expr.SetText(parser.src[startOffset:endOffset])
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: expr}
		}
	case 64:
		{
			parser.yyVAL.expr = &ast.ColumnNameExpr{Name: &ast.ColumnName{
				Name: model.NewCIStr(yyS[yypt-0].ident),
			}}
		}
	case 65:
		{
			parser.yyVAL.expr = &ast.ColumnNameExpr{Name: &ast.ColumnName{
				Table: model.NewCIStr(yyS[yypt-2].ident),
				Name:  model.NewCIStr(yyS[yypt-0].ident),
			}}
		}
	case 66:
		{
			parser.yyVAL.expr = &ast.ColumnNameExpr{Name: &ast.ColumnName{
				Table: model.NewCIStr(yyS[yypt-2].ident),
				Name:  model.NewCIStr(yyS[yypt-0].ident),
			}}
		}
	case 67:
		{
			parser.yyVAL.expr = &ast.ColumnNameExpr{Name: &ast.ColumnName{
				Schema: model.NewCIStr(yyS[yypt-4].ident),
				Table:  model.NewCIStr(yyS[yypt-2].ident),
				Name:   model.NewCIStr(yyS[yypt-0].ident),
			}}
		}
	case 68:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 69:
		{
			parser.yyVAL.expr = ast.NewValueExpr(nil)
		}
	case 70:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 71:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 72:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 73:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 74:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 75:
		{
			expr := ast.NewValueExpr(yyS[yypt-0].ident)
			parser.yyVAL.expr = expr
		}
	case 76:
		{
			valExpr := yyS[yypt-1].expr.(ast.ValueExpr)
			strLit := valExpr.GetString()
			expr := ast.NewValueExpr(strLit + yyS[yypt-0].ident)
			// Fix #4239, use first string literal as projection name.
			if valExpr.GetProjectionOffset() >= 0 {
				expr.SetProjectionOffset(valExpr.GetProjectionOffset())
			} else {
				expr.SetProjectionOffset(len(strLit))
			}
			parser.yyVAL.expr = expr
		}
	case 81:
		{
			parser.yyVAL.item = true
		}
	case 82:
		{
			parser.yyVAL.item = false
		}
	case 83:
		{
			parser.yyVAL.item = true
		}
	case 84:
		{
			parser.yyVAL.item = false
		}
	case 85:
		{
			parser.yyVAL.item = opcode.GE
		}
	case 86:
		{
			parser.yyVAL.item = opcode.GT
		}
	case 87:
		{
			parser.yyVAL.item = opcode.LE
		}
	case 88:
		{
			parser.yyVAL.item = opcode.LT
		}
	case 89:
		{
			parser.yyVAL.item = opcode.NE
		}
	case 90:
		{
			parser.yyVAL.item = opcode.NE
		}
	case 91:
		{
			parser.yyVAL.item = opcode.EQ
		}
	case 92:
		{
			parser.yyVAL.item = opcode.NullEQ
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
